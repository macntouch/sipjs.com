<?xml version="1.0" encoding="UTF-8"?>
<grammar ns="urn:ietf:params:xml:ns:cpl" xmlns="http://relaxng.org/ns/structure/1.0" datatypeLibrary="http://www.w3.org/2001/XMLSchema-datatypes">
  <start>
    <ref name="cpl"/>
  </start>
  <define name="cpl">
    <element name="cpl">
      <optional>
        <!-- foreign-attributes, -->
        <ref name="ancillary"/>
      </optional>
      <zeroOrMore>
        <ref name="subaction"/>
      </zeroOrMore>
      <ref name="toplevelaction"/>
    </element>
  </define>
  <!-- foreign-attributes = attribute * - (local:* | cpl:*) { text }* -->
  <define name="ancillary">
    <element name="ancillary">
      <empty/>
    </element>
  </define>
  <!--
    RFC3880 doesn't specify the type for the 'id' attribute - a minor bug mayhaps?
    a subaction cannot reference (via "sub") itself, or a subaction defined earlier (no recurrsion)
  -->
  <define name="subaction">
    <element name="subaction">
      <attribute name="id">
        <data type="string"/>
      </attribute>
      <ref name="node"/>
    </element>
  </define>
  <define name="toplevelaction">
    <interleave>
      <optional>
        <ref name="incoming"/>
      </optional>
      <optional>
        <ref name="outgoing"/>
      </optional>
    </interleave>
  </define>
  <define name="incoming">
    <element name="incoming">
      <ref name="node"/>
    </element>
  </define>
  <define name="outgoing">
    <element name="outgoing">
      <ref name="node"/>
    </element>
  </define>
  <define name="node">
    <choice>
      <ref name="switch"/>
      <ref name="modifier"/>
      <ref name="action"/>
      <ref name="sub"/>
      <empty/>
    </choice>
  </define>
  <define name="switch">
    <choice>
      <ref name="address-switch"/>
      <ref name="string-switch"/>
      <ref name="language-switch"/>
      <ref name="time-switch"/>
      <ref name="priority-switch"/>
    </choice>
  </define>
  <define name="modifier">
    <choice>
      <ref name="location"/>
      <ref name="lookup"/>
      <ref name="remove-location"/>
    </choice>
  </define>
  <define name="action">
    <choice>
      <ref name="proxy"/>
      <ref name="redirect"/>
      <ref name="reject"/>
      <ref name="mail"/>
      <ref name="log"/>
    </choice>
  </define>
  <!-- jump to a subaction -->
  <define name="sub">
    <element name="sub">
      <attribute name="ref">
        <data type="string"/>
      </attribute>
    </element>
  </define>
  <define name="address-switch">
    <element name="address-switch">
      <ref name="address-switch.attlist"/>
      <interleave>
        <zeroOrMore>
          <ref name="address"/>
        </zeroOrMore>
        <optional>
          <ref name="not-present"/>
        </optional>
      </interleave>
      <optional>
        <ref name="otherwise"/>
      </optional>
    </element>
  </define>
  <!-- field is required, subfield is optional -->
  <define name="address-switch.attlist">
    <attribute name="field">
      <choice>
        <value type="NMTOKEN">destination</value>
        <value type="NMTOKEN">origin</value>
        <value type="NMTOKEN">original-destination</value>
      </choice>
    </attribute>
    <optional>
      <!-- we don't implement 'password' (security) or 'alias-type' (h323) -->
      <attribute name="subfield">
        <choice>
          <!-- display is not yet supported -->
          <value type="NMTOKEN">display</value>
          <value type="NMTOKEN">user</value>
          <!-- address-type is not yet supported -->
          <value type="NMTOKEN">address-type</value>
          <value type="NMTOKEN">host</value>
          <value type="NMTOKEN">tel</value>
          <value type="NMTOKEN">port</value>
        </choice>
      </attribute>
    </optional>
  </define>
  <define name="address">
    <element name="address">
      <ref name="address.attlist"/>
      <ref name="node"/>
    </element>
  </define>
  <!--
    exactly one of these attributes
    contains only applies to "display" subfield, which is not supported
    subdomain-of only applies to "tel" and "host" subfields
  -->
  <define name="address.attlist">
    <choice>
      <attribute name="is">
        <data type="string"/>
      </attribute>
      <attribute name="contains">
        <data type="string"/>
      </attribute>
      <attribute name="subdomain-of">
        <data type="string"/>
      </attribute>
    </choice>
  </define>
  <define name="string-switch">
    <element name="string-switch">
      <ref name="string-switch.attlist"/>
      <interleave>
        <zeroOrMore>
          <ref name="string"/>
        </zeroOrMore>
        <optional>
          <ref name="not-present"/>
        </optional>
      </interleave>
      <optional>
        <ref name="otherwise"/>
      </optional>
    </element>
  </define>
  <!-- exactly one of these attributes, a header field -->
  <define name="string-switch.attlist">
    <attribute name="field">
      <choice>
        <value type="NMTOKEN">display</value>
        <value type="NMTOKEN">user-agent</value>
        <value type="NMTOKEN">subject</value>
        <value type="NMTOKEN">organization</value>
      </choice>
    </attribute>
  </define>
  <define name="string">
    <element name="string">
      <ref name="string.attlist"/>
      <ref name="node"/>
    </element>
  </define>
  <!-- exactly one of these attributes -->
  <define name="string.attlist">
    <choice>
      <attribute name="is">
        <data type="string"/>
      </attribute>
      <attribute name="contains">
        <data type="string"/>
      </attribute>
    </choice>
  </define>
  <!-- this element has no attributes -->
  <define name="language-switch">
    <element name="language-switch">
      <interleave>
        <zeroOrMore>
          <ref name="language"/>
        </zeroOrMore>
        <optional>
          <ref name="not-present"/>
        </optional>
      </interleave>
      <optional>
        <ref name="otherwise"/>
      </optional>
    </element>
  </define>
  <define name="language">
    <element name="language">
      <ref name="language.attlist"/>
      <ref name="node"/>
    </element>
  </define>
  <!--
    match is required
    this is a match against a language-tag or a set of language-ranges
    as defined in RFC 3066
  -->
  <define name="language.attlist">
    <attribute name="matches">
      <data type="string"/>
    </attribute>
  </define>
  <!-- this switch is independant of call itself, so it should be ok -->
  <define name="time-switch">
    <element name="time-switch">
      <ref name="time-switch.attlist"/>
      <interleave>
        <zeroOrMore>
          <ref name="time"/>
        </zeroOrMore>
        <optional>
          <ref name="not-present"/>
        </optional>
      </interleave>
      <optional>
        <ref name="otherwise"/>
      </optional>
    </element>
  </define>
  <!-- tzid and tzurl are optional -->
  <define name="time-switch.attlist">
    <optional>
      <attribute name="tzid">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="tzurl">
        <data type="anyURI"/>
      </attribute>
    </optional>
  </define>
  <define name="time">
    <element name="time">
      <ref name="time.attlist"/>
      <ref name="node"/>
    </element>
  </define>
  <!-- dtstart is required, everything else optional -->
  <define name="time.attlist">
    <attribute name="dtstart">
      <data type="string"/>
    </attribute>
    <optional>
      <attribute name="dtend">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="duration">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="freq">
        <data type="NMTOKEN">
          <param name="pattern">[s|S][e|E][c|C][o|O][n|N][d|D][l|L][y|Y]|[m|M][i|I][n|N][u|U][t|T][e|E][l|L][y|Y]|[h|H][o|O][u|U][r|R][l|L][y|Y]|[d|D][a|A][i|I][l|L][y|Y]|[w|W][e|E][e|E][k|K][l|L][y|Y]|[m|M][o|N][n|N][t|T][h|H][l|L][y|Y]|[y|Y][e|E][a|A][r|R][l|L][y|Y]</param>
        </data>
      </attribute>
    </optional>
    <optional>
      <attribute name="interval">
        <data type="positiveInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="until">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="count">
        <data type="positiveInteger"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="bysecond">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="byminute">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="byhour">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="byday">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="bymonthday">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="byyearday">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="byweekno">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="bymonth">
        <data type="string"/>
      </attribute>
    </optional>
    <optional>
      <attribute name="wkst">
        <data type="NMTOKEN">
          <param name="pattern">[m|M][o|O]|[t|T][u|U]|[w|W][e|E]|[t|T][h|H]|[f|F][r|R]|[s|S][a|A]|[s|S][u|U]</param>
        </data>
      </attribute>
    </optional>
    <optional>
      <attribute name="bysetpos">
        <choice>
          <data type="integer">
            <param name="minInclusive">-366</param>
            <param name="maxInclusive">-1</param>
          </data>
          <data type="integer">
            <param name="minInclusive">1</param>
            <param name="maxExclusive">366</param>
          </data>
        </choice>
      </attribute>
    </optional>
  </define>
  <!-- this element has no attributes -->
  <define name="priority-switch">
    <element name="priority-switch">
      <interleave>
        <zeroOrMore>
          <ref name="priority"/>
        </zeroOrMore>
        <optional>
          <ref name="not-present"/>
        </optional>
      </interleave>
      <optional>
        <ref name="otherwise"/>
      </optional>
    </element>
  </define>
  <define name="priority">
    <element name="priority">
      <ref name="priority.attlist"/>
      <ref name="node"/>
    </element>
  </define>
  <!-- exactly one of these attributes -->
  <define name="priority.attlist">
    <choice>
      <attribute name="equal">
        <data type="string"/>
      </attribute>
      <attribute name="greater">
        <data type="NMTOKEN">
          <param name="pattern">[e|E][m|M][e|E][r|R][g|G][e|E][n|N][c|C][y|Y]|[u|U][r|R][g|G][e|E][n|N][t|T]|[n|N][o|O][r|R][m|M][a|A][l|L]|[n|N][o|O][n|N]-[u|U][r|R][g|G][e|E][n|N][t|T]</param>
        </data>
      </attribute>
      <attribute name="less">
        <data type="NMTOKEN">
          <param name="pattern">[e|E][m|M][e|E][r|R][g|G][e|E][n|N][c|C][y|Y]|[u|U][r|R][g|G][e|E][n|N][t|T]|[n|N][o|O][r|R][m|M][a|A][l|L]|[n|N][o|O][n|N]-[u|U][r|R][g|G][e|E][n|N][t|T]</param>
        </data>
      </attribute>
    </choice>
  </define>
  <define name="not-present">
    <element name="not-present">
      <ref name="node"/>
    </element>
  </define>
  <define name="otherwise">
    <element name="otherwise">
      <ref name="node"/>
    </element>
  </define>
  <define name="location">
    <element name="location">
      <attribute name="url">
        <data type="anyURI"/>
      </attribute>
      <optional>
        <attribute name="priority">
          <data type="float">
            <param name="minInclusive">0.0</param>
            <param name="maxInclusive">1.0</param>
          </data>
        </attribute>
      </optional>
      <optional>
        <attribute name="clear">
          <choice>
            <value type="NMTOKEN">no</value>
            <value type="NMTOKEN">yes</value>
          </choice>
        </attribute>
      </optional>
      <ref name="node"/>
    </element>
  </define>
  <!--
    source is restricted to 'registration'
    seems like looking a registration would only be usefull on incoming calls
    also we handle registrations elsewhere - ie proxy or sip.
  -->
  <define name="lookup">
    <element name="lookup">
      <attribute name="source">
        <value type="NMTOKEN">registration</value>
      </attribute>
      <optional>
        <attribute name="timeout">
          <data type="positiveInteger"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="clear">
          <choice>
            <value type="NMTOKEN">no</value>
            <value type="NMTOKEN">yes</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <attribute name="aor">
          <data type="string"/>
        </attribute>
      </optional>
      <interleave>
        <optional>
          <element name="success">
            <ref name="node"/>
          </element>
        </optional>
        <optional>
          <element name="notfound">
            <ref name="node"/>
          </element>
        </optional>
        <optional>
          <element name="failure">
            <ref name="node"/>
          </element>
        </optional>
      </interleave>
    </element>
  </define>
  <!-- FIXME: seems like location should be typed xsd:anyURI -->
  <define name="remove-location">
    <element name="remove-location">
      <optional>
        <attribute name="location">
          <data type="string"/>
        </attribute>
      </optional>
      <ref name="node"/>
    </element>
  </define>
  <!-- need to check implementation of recursive -->
  <define name="proxy">
    <element name="proxy">
      <optional>
        <attribute name="timeout">
          <data type="positiveInteger"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="recurse">
          <choice>
            <value type="NMTOKEN">no</value>
            <value type="NMTOKEN">yes</value>
          </choice>
        </attribute>
      </optional>
      <optional>
        <attribute name="ordering">
          <choice>
            <value type="NMTOKEN">parallel</value>
            <value type="NMTOKEN">sequential</value>
            <value type="NMTOKEN">first-only</value>
          </choice>
        </attribute>
      </optional>
      <interleave>
        <optional>
          <element name="busy">
            <ref name="node"/>
          </element>
        </optional>
        <optional>
          <element name="noanswer">
            <ref name="node"/>
          </element>
        </optional>
        <optional>
          <element name="failure">
            <ref name="node"/>
          </element>
        </optional>
        <optional>
          <element name="redirection">
            <ref name="node"/>
          </element>
        </optional>
        <optional>
          <element name="default">
            <ref name="node"/>
          </element>
        </optional>
      </interleave>
    </element>
  </define>
  <define name="redirect">
    <element name="redirect">
      <optional>
        <attribute name="permanent">
          <choice>
            <value type="NMTOKEN">no</value>
            <value type="NMTOKEN">yes</value>
          </choice>
        </attribute>
      </optional>
    </element>
  </define>
  <!-- this allows SIP 4xx-6xx status codes, but perhaps be limit it to the basic four -->
  <define name="reject">
    <element name="reject">
      <optional>
        <attribute name="reason">
          <data type="string"/>
        </attribute>
      </optional>
      <attribute name="status">
        <choice>
          <value type="NMTOKEN">reject</value>
          <value type="NMTOKEN">notfound</value>
          <value type="NMTOKEN">busy</value>
          <value type="NMTOKEN">error</value>
          <data type="NMTOKEN">
            <param name="pattern">[4-6][0-9][0-9]</param>
          </data>
        </choice>
      </attribute>
    </element>
  </define>
  <!-- need to check implementation of mail -->
  <define name="mail">
    <element name="mail">
      <attribute name="url">
        <data type="anyURI"/>
      </attribute>
      <ref name="node"/>
    </element>
  </define>
  <!-- need to check implementation of log -->
  <define name="log">
    <element name="log">
      <optional>
        <attribute name="name">
          <data type="string"/>
        </attribute>
      </optional>
      <optional>
        <attribute name="comment">
          <data type="string"/>
        </attribute>
      </optional>
      <ref name="node"/>
    </element>
  </define>
</grammar>
